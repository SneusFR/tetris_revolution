const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const REPO = 'SneusFR/tetris_revolution';
const VERSION = process.argv[2] || 'v1.0.0';
const DIST_DIR = 'dist-electron';

console.log(`üöÄ Publication de la release ${VERSION}...`);

// V√©rifier que les fichiers build√©s existent
if (!fs.existsSync(DIST_DIR)) {
  console.error('‚ùå Le dossier dist-electron n\'existe pas. Lancez d\'abord npm run electron:dist');
  process.exit(1);
}

try {
  // Cr√©er un tag Git
  console.log('üìù Cr√©ation du tag Git...');
  execSync(`git tag ${VERSION}`, { stdio: 'inherit' });
  execSync(`git push origin ${VERSION}`, { stdio: 'inherit' });

  // Cr√©er la release GitHub
  console.log('üè∑Ô∏è Cr√©ation de la release GitHub...');
  
  const releaseNotes = `
# Tetris Revolution ${VERSION}

## üéÆ Nouvelle version desktop disponible !

### ‚ú® Fonctionnalit√©s :
- üéØ Jeu Tetris complet avec effets visuels
- üèÜ Syst√®me de classement en ligne
- üé® Th√®mes personnalisables
- üîä Effets sonores immersifs
- üìä Statistiques d√©taill√©es
- üë§ Syst√®me de profil utilisateur

### üì¶ T√©l√©chargements disponibles :
- **Windows** : \`Tetris Revolution Setup ${VERSION.replace('v', '')}.exe\` (Installateur)
- **Windows** : \`Tetris Revolution ${VERSION.replace('v', '')}.exe\` (Portable)
- **macOS** : \`Tetris Revolution-${VERSION.replace('v', '')}.dmg\`
- **Linux** : \`Tetris Revolution-${VERSION.replace('v', '')}.AppImage\`

### üîß Installation :
1. T√©l√©chargez le fichier correspondant √† votre syst√®me
2. Lancez l'installateur ou l'ex√©cutable
3. Profitez du jeu !

---
*Version build√©e automatiquement*
  `.trim();

  // Cr√©er la release avec gh CLI
  execSync(`gh release create ${VERSION} --title "Tetris Revolution ${VERSION}" --notes "${releaseNotes}"`, { 
    stdio: 'inherit',
    cwd: process.cwd()
  });

  // Uploader les fichiers
  console.log('üì§ Upload des fichiers...');
  const files = fs.readdirSync(DIST_DIR).filter(file => {
    return file.endsWith('.exe') || 
           file.endsWith('.dmg') || 
           file.endsWith('.AppImage') || 
           file.endsWith('.deb') ||
           file.endsWith('.zip') ||
           file.endsWith('.tar.gz');
  });

  for (const file of files) {
    const filePath = path.join(DIST_DIR, file);
    console.log(`  üìé Upload de ${file}...`);
    execSync(`gh release upload ${VERSION} "${filePath}"`, { stdio: 'inherit' });
  }

  console.log(`‚úÖ Release ${VERSION} publi√©e avec succ√®s !`);
  console.log(`üîó Voir la release : https://github.com/${REPO}/releases/tag/${VERSION}`);

} catch (error) {
  console.error('‚ùå Erreur lors de la publication :', error.message);
  process.exit(1);
}
